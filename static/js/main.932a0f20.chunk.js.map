{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/posts.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/users.js","App.jsx","index.js"],"names":["PostsList","posts","selectedPostId","useState","detailedPostId","setDetailedPostId","className","map","post","key","id","userId","title","type","onClick","postId","checkDetailsOpeness","BASE_URL","getUserPosts","a","fetch","response","json","result","data","filter","getPostDetails","getPostComments","comment","getCommentFromServer","commentId","options","NewCommentForm","name","setName","email","setEmail","setComment","addToList","onSubmit","event","preventDefault","formSubmit","placeholder","value","onChange","target","PostDetails","isButtonClicked","setButtonClick","postDetails","setPostDetails","postComments","setPostComments","writerName","setWriterName","writerEmail","setWriterEmail","commentBody","setCommentBody","getComments","then","useEffect","deleteCommentFromList","method","deleteComment","body","length","JSON","stringify","addComment","getUsers","responce","slice","App","setPosts","users","setUsers","selectedUser","setSelectedUser","setSelectedPost","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.932a0f20.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './PostsList.scss';\n\nimport PropTypes from 'prop-types';\n\nexport const PostsList = ({ posts, selectedPostId }) => {\n  const [detailedPostId, setDetailedPostId] = useState();\n\n  const checkDetailsOpeness = (postId) => {\n    if (detailedPostId === postId) {\n      selectedPostId();\n      setDetailedPostId();\n\n      return;\n    }\n\n    selectedPostId(postId);\n    setDetailedPostId(postId);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => checkDetailsOpeness(post.id)}\n            >\n              {detailedPostId && detailedPostId === post.id\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedPostId: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const response = await fetch(`${BASE_URL}/posts`);\n  const result = await response.json();\n\n  if (!userId) {\n    return result.data;\n  }\n\n  return result.data.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const result = await response.json();\n\n  return result.data;\n};\n\n// Comment for comparing of different promise methods async and .then\n// export const getUserPosts = async(userId) => {\n//   const response = await fetch(`${BASE_URL}/posts`);\n\n//   if (!userId) {\n//     return response.json()\n//       .then(responseOfPostsObject => responseOfPostsObject.data);\n//   }\n\n//   return response.json()\n//     .then(responseOfPostsObject => responseOfPostsObject.data)\n//     .then(posts => posts.filter(\n//       post => post.userId === userId,\n//     ));\n// };\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async(postId) => {\n  const response = await fetch(`${BASE_URL}/comments`);\n  const result = await response.json();\n\n  return postId\n    ? result.data.filter(comment => comment.postId === postId)\n    : '';\n};\n\nasync function getCommentFromServer(commentId, options) {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, options);\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport function deleteComment(commentId) {\n  return getCommentFromServer(commentId, {\n    method: 'DELETE',\n  });\n}\n\nexport function addComment(postId, name, email, body) {\n  return getCommentFromServer('', {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n}\n","import React from 'react';\nimport './NewCommentForm.scss';\n\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({\n  name,\n  setName,\n  email,\n  setEmail,\n  comment,\n  setComment,\n  addToList,\n}) => {\n  const formSubmit = (event) => {\n    event.preventDefault();\n    addToList();\n    setName('');\n    setEmail('');\n    setComment('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={event => formSubmit(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment}\n          onChange={event => setComment(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  name: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n  setEmail: PropTypes.func.isRequired,\n  comment: PropTypes.string.isRequired,\n  setComment: PropTypes.func.isRequired,\n  addToList: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment, addComment } from '../../api/comments';\n\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [isButtonClicked, setButtonClick] = useState(false);\n  const [postDetails, setPostDetails] = useState();\n  const [postComments, setPostComments] = useState();\n  const [writerName, setWriterName] = useState();\n  const [writerEmail, setWriterEmail] = useState();\n  const [commentBody, setCommentBody] = useState();\n\n  const getDetails = () => {\n    getPostDetails(postId).then(setPostDetails);\n  };\n\n  const getComments = () => {\n    getPostComments(postId).then(setPostComments);\n  };\n\n  useEffect(() => {\n    getDetails();\n    getComments();\n  }, [postId]);\n\n  const deleteCommentFromList = (commentId) => {\n    deleteComment(commentId)\n      .then(getComments);\n  };\n\n  const addCommentToList = () => {\n    addComment(postId, writerName, writerEmail, commentBody)\n      .then(getComments);\n    setWriterName('');\n    setWriterEmail('');\n    setCommentBody('');\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {postDetails && (\n        <section className=\"PostDetails__post\">\n          <h4>\n            {postDetails.title}\n          </h4>\n\n          <p>\n            {postDetails.body}\n          </p>\n        </section>\n      )}\n\n      {}\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button PostDetails__button\"\n          onClick={() => setButtonClick(!isButtonClicked)}\n        >\n          {`${!isButtonClicked ? 'Hide' : 'Show'}\n          ${' '}\n          ${postComments && postComments.length} comments`}\n        </button>\n\n        {postComments && !isButtonClicked && (\n          <ul className=\"PostDetails__list\">\n            {postComments.map(comment => (\n              <li\n                key={comment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteCommentFromList(comment.id)}\n                >\n                  X\n                </button>\n\n                <p>\n                  {comment.body}\n                </p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            name={writerName}\n            setName={setWriterName}\n            email={writerEmail}\n            setEmail={setWriterEmail}\n            comment={commentBody}\n            setComment={setCommentBody}\n            addToList={addCommentToList}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async() => {\n  const responce = await fetch(`${BASE_URL}/users`);\n  const result = await responce.json();\n\n  return result.data.slice(0, 10);\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState('');\n  const [selectedPostId, setSelectedPost] = useState();\n\n  useEffect(() => {\n    getUserPosts(+selectedUser).then(setPosts);\n  }, [selectedUser]);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUser}\n            onChange={event => setSelectedUser(event.target.value)}\n          >\n            <option value=\"\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={setSelectedPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n          && (\n            <PostDetails\n              postId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}