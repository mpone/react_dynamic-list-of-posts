{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/posts.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/users.js","App.jsx","index.js"],"names":["PostsList","posts","setPostId","useState","detailedPostId","setDetailedPostId","className","map","post","key","id","userId","title","type","onClick","postId","checkDetailsOpeness","BASE_URL","getUserPosts","a","fetch","response","json","result","data","filter","getPostDetails","getPostComments","comment","makeOperationWithComment","commentId","options","NewCommentForm","addToList","setData","commentBody","setCommentBody","isCommentBodyEmpty","setCommentBodyEmptiness","addDataToComment","target","prevData","name","value","onSubmit","event","preventDefault","formSubmit","placeholder","onChange","email","body","style","color","defaultProps","PostDetails","isButtonClicked","setButtonClick","postDetails","setPostDetails","postComments","setPostComments","commentData","setCommentData","getComments","then","useEffect","deleteCommentFromList","method","deleteComment","length","JSON","stringify","addComment","getUsers","responce","slice","App","setPosts","users","setUsers","selectedUserId","setSelectedUserId","selectedPostId","setSelectedPostId","user","ReactDOM","render","document","getElementById"],"mappings":"wUAKaA,G,kBAAY,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAAgB,EACLC,mBAAS,MADJ,mBAC1CC,EAD0C,KAC1BC,EAD0B,KAejD,OACE,yBAAKC,UAAU,aACb,sCAEA,wBAAIA,UAAU,mBACXL,EAAMM,KAAI,SAAAC,GAAI,OACb,wBACEC,IAAKD,EAAKE,GACVJ,UAAU,mBAEV,6BACE,4CAAcE,EAAKG,OAAnB,QACCH,EAAKI,OAGR,4BACEC,KAAK,SACLP,UAAU,2BACVQ,QAAS,kBA9BO,SAACC,GAC3B,GAAIX,IAAmBW,EAIrB,OAHAb,EAAU,WACVG,EAAkB,MAKpBH,EAAUa,GACVV,EAAkBU,GAqBOC,CAAoBR,EAAKE,MAEvCN,GAAkBA,IAAmBI,EAAKE,GACvC,QACA,gB,uBC1CLO,EAAW,iCCEXC,EAAY,uCAAG,WAAMP,GAAN,iBAAAQ,EAAA,sEACHC,MAAM,GAAD,OAAIH,EAAJ,WADF,cACpBI,EADoB,gBAELA,EAASC,OAFJ,UAEpBC,EAFoB,OAIrBZ,EAJqB,yCAKjBY,EAAOC,MALU,gCAQnBD,EAAOC,KAAKC,QAAO,SAAAjB,GAAI,OAAIA,EAAKG,SAAWA,MARxB,2CAAH,sDAWZe,EAAc,uCAAG,WAAMX,GAAN,iBAAAI,EAAA,sEACLC,MAAM,GAAD,OAAIH,EAAJ,kBAAsBF,IADtB,cACtBM,EADsB,gBAEPA,EAASC,OAFF,cAEtBC,EAFsB,yBAIrBA,EAAOC,MAJc,2CAAH,sDCXdG,EAAe,uCAAG,WAAMZ,GAAN,iBAAAI,EAAA,sEACNC,MAAM,GAAD,OAAIH,EAAJ,cADC,cACvBI,EADuB,gBAERA,EAASC,OAFD,cAEvBC,EAFuB,yBAItBR,EACHQ,EAAOC,KAAKC,QAAO,SAAAG,GAAO,OAAIA,EAAQb,SAAWA,KACjD,IANyB,2CAAH,sD,SASbc,E,gFAAf,WAAwCC,EAAWC,GAAnD,iBAAAZ,EAAA,sEACyBC,MAAM,GAAD,OAAIH,EAAJ,qBAAyBa,GAAaC,GADpE,cACQV,EADR,gBAEuBA,EAASC,OAFhC,cAEQC,EAFR,yBAISA,EAAOC,MAJhB,4C,wCCNaQ,G,MAAiB,SAAC,GAIxB,IAHLC,EAGI,EAHJA,UACAT,EAEI,EAFJA,KACAU,EACI,EADJA,QACI,EACkC/B,mBAAS,IAD3C,mBACGgC,EADH,KACgBC,EADhB,OAEkDjC,oBAAS,GAF3D,mBAEGkC,EAFH,KAEuBC,EAFvB,KAgBEC,EAAmB,SAACC,GACxBN,GAAQ,SAAAO,GAAQ,kCACXA,GADW,kBAEbD,EAAOE,KAAOF,EAAOG,YAI1B,OACE,0BACErC,UAAU,iBACVsC,SAAU,SAAAC,GAAK,OAtBA,SAACA,GAClBA,EAAMC,iBAEDX,EAMLF,IALEK,GAAwB,GAkBLS,CAAWF,KAE9B,yBAAKvC,UAAU,cACb,2BACEO,KAAK,OACL6B,KAAK,OACLM,YAAY,YACZ1C,UAAU,wBACVqC,MAAOnB,EAAKkB,KACZO,SAAU,gBAAGT,EAAH,EAAGA,OAAH,OAAgBD,EAAiBC,OAI/C,yBAAKlC,UAAU,cACb,2BACEO,KAAK,OACL6B,KAAK,QACLM,YAAY,aACZ1C,UAAU,wBACVqC,MAAOnB,EAAK0B,MACZD,SAAU,gBAAGT,EAAH,EAAGA,OAAH,OAAgBD,EAAiBC,OAI/C,yBAAKlC,UAAU,cACb,8BACEoC,KAAK,OACLM,YAAY,oBACZ1C,UAAU,wBACVqC,MAAOnB,EAAK2B,KACZF,SAAU,YAAiB,IAAdT,EAAa,EAAbA,OACXD,EAAiBC,GACjBJ,EAAeI,EAAOG,OACtBL,GAAwB,OAK9B,4BACEzB,KAAK,SACLP,UAAU,wCAFZ,iBAOC+B,GACC,uBAAGe,MAAO,CAAEC,MAAO,QAAnB,4BAkBRrB,EAAesB,aAAe,CAC5B9B,KAAM,CACJkB,KAAM,GACNQ,MAAO,GACPtB,QAAS,K,UC7FA2B,EAAc,SAAC,GAAgB,IAAdxC,EAAa,EAAbA,OAAa,EACCZ,oBAAS,GADV,mBAClCqD,EADkC,KACjBC,EADiB,OAEHtD,qBAFG,mBAElCuD,EAFkC,KAErBC,EAFqB,OAGDxD,qBAHC,mBAGlCyD,EAHkC,KAGpBC,EAHoB,OAIH1D,mBAAS,CAC7CuC,KAAM,GACNQ,MAAO,GACPC,KAAM,KAPiC,mBAIlCW,EAJkC,KAIrBC,EAJqB,KAcnCC,EAAc,WAClBrC,EAAgBZ,GAAQkD,KAAKJ,IAG/BK,qBAAU,WAPRxC,EAAeX,GAAQkD,KAAKN,GAS5BK,MACC,CAACjD,IAEJ,IAAMoD,EAAwB,SAACrC,IFf1B,SAAuBA,GAC5B,OAAOD,EAAyBC,EAAW,CACzCsC,OAAQ,YEcRC,CAAcvC,GACXmC,KAAKD,IAYV,OACE,yBAAK1D,UAAU,eACb,6CAECoD,GACC,6BAASpD,UAAU,qBACjB,4BACGoD,EAAY9C,OAGf,2BACG8C,EAAYP,OAMnB,6BAAS7C,UAAU,yBAEhBsD,GAAwC,IAAxBA,EAAaU,QAC5B,4BACEzD,KAAK,SACLP,UAAU,6BACVQ,QAAS,kBAAM2C,GAAgBD,KAHjC,UAKOA,EAA2B,OAAT,OALzB,iBAMI,IANJ,yBAOII,EAAaU,OAPjB,cAWDV,IAAiBJ,GAChB,wBAAIlD,UAAU,qBACXsD,EAAarD,KAAI,SAAAqB,GAAO,OACvB,wBACEnB,IAAKmB,EAAQlB,GACbJ,UAAU,0BAEV,4BACEO,KAAK,SACLP,UAAU,oCACVQ,QAAS,kBAAMqD,EAAsBvC,EAAQlB,MAH/C,KAQA,2BACGkB,EAAQc,MAGX,2BACGd,EAAQuB,YAQrB,iCACE,yBAAK7C,UAAU,6BACb,kBAAC,EAAD,CACE2B,UAvEe,YFdpB,SAAoBlB,EAApB,GAAoD,IAAtB2B,EAAqB,EAArBA,KAAMQ,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KAChD,OAAOtB,EAAyB,GAAI,CAClCuC,OAAQ,OACRjB,KAAMoB,KAAKC,UAAU,CACnBzD,SACA2B,OACAQ,QACAC,YEQFsB,CAAW1D,EAAQ+C,GAAaG,KAAKD,GACrCD,EAAe,CACbrB,KAAM,GACNQ,MAAO,GACPC,KAAM,MAmEA3B,KAAMsC,EACN5B,QAAS6B,QC7GRW,EAAQ,uCAAG,8BAAAvD,EAAA,sEACCC,MAAM,GAAD,OAAIH,EAAJ,WADN,cAChB0D,EADgB,gBAEDA,EAASrD,OAFR,cAEhBC,EAFgB,yBAIfA,EAAOC,KAAKoD,MAAM,EAAG,KAJN,2CAAH,qDCiENC,EA1DH,WAAO,IAAD,EACU1E,mBAAS,IADnB,mBACTF,EADS,KACF6E,EADE,OAEU3E,mBAAS,IAFnB,mBAET4E,EAFS,KAEFC,EAFE,OAG4B7E,mBAAS,IAHrC,mBAGT8E,EAHS,KAGOC,EAHP,OAI4B/E,mBAAS,MAJrC,mBAITgF,EAJS,KAIOC,EAJP,KAchB,OARAlB,qBAAU,WACRhD,GAAc+D,GAAgBhB,KAAKa,KAClC,CAACG,IAEJf,qBAAU,WACRQ,IAAWT,KAAKe,KACf,IAGD,yBAAK1E,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACVqC,MAAOsC,EACPhC,SAAU,SAAAJ,GAAK,OAAIqC,EAAkBrC,EAAML,OAAOG,SAElD,4BAAQA,MAAM,IAAd,aACCoC,EAAMxE,KAAI,SAAA8E,GAAI,OACb,4BACE5E,IAAK4E,EAAK3E,GACViC,MAAO0C,EAAK3E,IAEX2E,EAAK3C,YAOhB,0BAAMpC,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEL,MAAOA,EACPC,UAAWkF,KAIdD,GACC,yBAAK7E,UAAU,gBACb,kBAAC,EAAD,CACES,OAAQoE,QCrDtBG,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.51d0ffb3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './PostsList.scss';\n\nimport PropTypes from 'prop-types';\n\nexport const PostsList = ({ posts, setPostId }) => {\n  const [detailedPostId, setDetailedPostId] = useState(null);\n\n  const checkDetailsOpeness = (postId) => {\n    if (detailedPostId === postId) {\n      setPostId(null);\n      setDetailedPostId(null);\n\n      return;\n    }\n\n    setPostId(postId);\n    setDetailedPostId(postId);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => checkDetailsOpeness(post.id)}\n            >\n              {detailedPostId && detailedPostId === post.id\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  setPostId: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const response = await fetch(`${BASE_URL}/posts`);\n  const result = await response.json();\n\n  if (!userId) {\n    return result.data;\n  }\n\n  return result.data.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const result = await response.json();\n\n  return result.data;\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async(postId) => {\n  const response = await fetch(`${BASE_URL}/comments`);\n  const result = await response.json();\n\n  return postId\n    ? result.data.filter(comment => comment.postId === postId)\n    : '';\n};\n\nasync function makeOperationWithComment(commentId, options) {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, options);\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport function deleteComment(commentId) {\n  return makeOperationWithComment(commentId, {\n    method: 'DELETE',\n  });\n}\n\nexport function addComment(postId, { name, email, body }) {\n  return makeOperationWithComment('', {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n}\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({\n  addToList,\n  data,\n  setData,\n}) => {\n  const [commentBody, setCommentBody] = useState('');\n  const [isCommentBodyEmpty, setCommentBodyEmptiness] = useState(false);\n\n  const formSubmit = (event) => {\n    event.preventDefault();\n\n    if (!commentBody) {\n      setCommentBodyEmptiness(true);\n\n      return;\n    }\n\n    addToList();\n  };\n\n  const addDataToComment = (target) => {\n    setData(prevData => ({\n      ...prevData,\n      [target.name]: target.value,\n    }));\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={event => formSubmit(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={data.name}\n          onChange={({ target }) => addDataToComment(target)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={data.email}\n          onChange={({ target }) => addDataToComment(target)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={data.body}\n          onChange={({ target }) => {\n            addDataToComment(target);\n            setCommentBody(target.value);\n            setCommentBodyEmptiness(false);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n\n      {isCommentBodyEmpty && (\n        <p style={{ color: 'red' }}>\n          Add a comment, please\n        </p>\n      )}\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string,\n  }),\n  setData: PropTypes.func.isRequired,\n  addToList: PropTypes.func.isRequired,\n};\n\nNewCommentForm.defaultProps = {\n  data: {\n    name: '',\n    email: '',\n    comment: '',\n  },\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment, addComment } from '../../api/comments';\n\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [isButtonClicked, setButtonClick] = useState(false);\n  const [postDetails, setPostDetails] = useState();\n  const [postComments, setPostComments] = useState();\n  const [commentData, setCommentData] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const getDetails = () => {\n    getPostDetails(postId).then(setPostDetails);\n  };\n\n  const getComments = () => {\n    getPostComments(postId).then(setPostComments);\n  };\n\n  useEffect(() => {\n    getDetails();\n    getComments();\n  }, [postId]);\n\n  const deleteCommentFromList = (commentId) => {\n    deleteComment(commentId)\n      .then(getComments);\n  };\n\n  const addCommentToList = () => {\n    addComment(postId, commentData).then(getComments);\n    setCommentData({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {postDetails && (\n        <section className=\"PostDetails__post\">\n          <h4>\n            {postDetails.title}\n          </h4>\n\n          <p>\n            {postDetails.body}\n          </p>\n        </section>\n      )}\n\n      {}\n      <section className=\"PostDetails__comments\">\n\n        {postComments && postComments.length !== 0 && (\n          <button\n            type=\"button\"\n            className=\"button PostDetails__button\"\n            onClick={() => setButtonClick(!isButtonClicked)}\n          >\n            {`${!isButtonClicked ? 'Hide' : 'Show'}\n            ${' '}\n            ${postComments.length} comments`}\n          </button>\n        )}\n\n        {postComments && !isButtonClicked && (\n          <ul className=\"PostDetails__list\">\n            {postComments.map(comment => (\n              <li\n                key={comment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteCommentFromList(comment.id)}\n                >\n                  X\n                </button>\n\n                <p>\n                  {comment.name}\n                </p>\n\n                <p>\n                  {comment.body}\n                </p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            addToList={addCommentToList}\n            data={commentData}\n            setData={setCommentData}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async() => {\n  const responce = await fetch(`${BASE_URL}/users`);\n  const result = await responce.json();\n\n  return result.data.slice(0, 10);\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState(null);\n\n  useEffect(() => {\n    getUserPosts(+selectedUserId).then(setPosts);\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={event => setSelectedUserId(event.target.value)}\n          >\n            <option value=\"\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            setPostId={setSelectedPostId}\n          />\n        </div>\n\n        {selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails\n              postId={selectedPostId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}